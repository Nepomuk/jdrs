##-----------------------------------------------------------------------------
## Title      : Xilinx LogiCORE Virtex-6 Embedded Tri-Mode Ethernet MAC Example
##              Constraints File
## Project    : Xilinx LogiCORE Virtex-6 Embedded Tri-Mode Ethernet MAC
## File       : ethernet_core_example_design.ucf
## Version    : 2.2
##-----------------------------------------------------------------------------
##
## (c) Copyright 2011 Xilinx, Inc. All rights reserved.
##
## This file contains confidential and proprietary information
## of Xilinx, Inc. and is protected under U.S. and
## international copyright and other intellectual property
## laws.
##
## DISCLAIMER
## This disclaimer is not a license and does not grant any
## rights to the materials distributed herewith. Except as
## otherwise provided in a valid license issued to you by
## Xilinx, and to the maximum extent permitted by applicable
## law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
## WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
## AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
## BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
## INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
## (2) Xilinx shall not be liable (whether in contract or tort,
## including negligence, or under any other theory of
## liability) for any loss or damage of any kind or nature
## related to, arising under or in connection with these
## materials, including for any direct, or any indirect,
## special, incidental, or consequential loss or damage
## (including loss of data, profits, goodwill, or any type of
## loss or damage suffered as a result of any action brought
## by a third party) even if such damage or loss was
## reasonably foreseeable or Xilinx had been advised of the
## possibility of the same.
##
## CRITICAL APPLICATIONS
## Xilinx products are not designed or intended to be fail-
## safe, or for use in any application requiring fail-safe
## performance, such as life-support or safety devices or
## systems, Class III medical devices, nuclear facilities,
## applications related to the deployment of airbags, or any
## other applications that could lead to death, personal
## injury, or severe property or environmental damage
## (individually and collectively, "Critical
## Applications"). Customer assumes the sole risk and
## liability of any use of Xilinx products in Critical
## Applications, subject only to applicable laws and
## regulations governing limitations on product liability.
##
## THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
## PART OF THIS FILE AT ALL TIMES.
##
##-----------------------------------------------------------------------------
## Description:  This is an example constraints file for the Virtex-6 Embedded
##               Tri-Mode Ethernet MAC. It is designed to apply to the
##               example design hierarchical level. In general, the constraints
##               in this file are necessary to implement a correctly-
##               functioning Ethernet MAC, and some constraints must be
##               modified according to your specific design and pinout choices.
##-----------------------------------------------------------------------------

# The xc6vlx240tff1156-1 part is chosen for this example design.
# this is the chosen device on the ML605 demonstration platform.
# This value should be modified to match your device.
CONFIG PART = xc6vlx240tff1156-1;

#
####
#######
##########
#############
#################
## System level constraints


########## ML605 Board ##########
NET CLK_IN_P         LOC = J9   | IOSTANDARD = LVDS_25  | DIFF_TERM = TRUE;
NET CLK_IN_N         LOC = H9   | IOSTANDARD = LVDS_25  | DIFF_TERM = TRUE;

NET CLK66		  		LOC = U23  | IOSTANDARD = LVCMOS25;

#NET MGTREFCLK_N		LOC = H5   | IOSTANDARD = LVDS_25  | DIFF_TERM = TRUE;
#NET MGTREFCLK_P		LOC = H6   | IOSTANDARD = LVDS_25  | DIFF_TERM = TRUE;

NET GLBL_RST         LOC = H10  | IOSTANDARD = LVCMOS15 | TIG;


#### Module LEDs_8Bit constraints


#### Module LEDs_8Bit constraints
#Net frame_error      LOC = AH28 | IOSTANDARD = LVCMOS25;
#Net frame_errorn     LOC = AH27 | IOSTANDARD = LVCMOS25;

NET USER_LED<0>			LOC = AC22  | IOSTANDARD = LVCMOS25;
NET USER_LED<1>			LOC = AC24  | IOSTANDARD = LVCMOS25;
NET USER_LED<2>			LOC = AE22  | IOSTANDARD = LVCMOS25;
NET USER_LED<3>			LOC = AE23  | IOSTANDARD = LVCMOS25;
NET USER_LED<4>			LOC = AB23  | IOSTANDARD = LVCMOS25;
NET USER_LED<5>			LOC = AG23  | IOSTANDARD = LVCMOS25;
NET USER_LED<6>			LOC = AE24  | IOSTANDARD = LVCMOS25;
NET USER_LED<7>			LOC = AD24  | IOSTANDARD = LVCMOS25;

NET USER_SWITCH<0>		LOC = D22	| IOSTANDARD = LVCMOS15;
NET USER_SWITCH<1>		LOC = C22	| IOSTANDARD = LVCMOS15;
NET USER_SWITCH<2>		LOC = L21	| IOSTANDARD = LVCMOS15;
NET USER_SWITCH<3>		LOC = L20	| IOSTANDARD = LVCMOS15;
NET USER_SWITCH<4>		LOC = C18	| IOSTANDARD = LVCMOS15;
#NET USER_SWITCH<5>		LOC = B18	| IOSTANDARD = LVCMOS15;
#NET USER_SWITCH<6>		LOC = K22	| IOSTANDARD = LVCMOS15;
#NET USER_SWITCH<7>		LOC = K21	| IOSTANDARD = LVCMOS15;

##### Module LCD constraints
NET SF_D<0> 	LOC = "AD14"; ## 4 on J41
NET SF_D<1> 	LOC = "AK11"; ## 3 on J41
NET SF_D<2> 	LOC = "AJ11"; ## 2 on J41
NET SF_D<3> 	LOC = "AE12"; ## 1 on J41
NET LCD_E   	LOC = "AK12"; ## 9 on J41
NET LCD_RS  	LOC = "T28"; ## 11 on J41
NET LCD_RW	  	LOC = "AC14"; ## 10 on J41

# fan control: low = fan off, high = fan on
NET SM_FAN_PWM      LOC = L10;


#### Module Push_Buttons_4Bit constraints
#Net update_speed     LOC = G26  | IOSTANDARD = LVCMOS15;
#Net serial_command   LOC = G17  | IOSTANDARD = LVCMOS15;
Net PAUSE_REQ_S		LOC = A19  | IOSTANDARD = LVCMOS15;
#Net reset_error      LOC = A18  | IOSTANDARD = LVCMOS15;


#### Module DIP_Switches_4Bit constraints
#Net mac_speed<0>     LOC = D22  | IOSTANDARD = LVCMOS15;
#Net mac_speed<1>     LOC = C22  | IOSTANDARD = LVCMOS15;
#Net gen_tx_data      LOC = L21  | IOSTANDARD = LVCMOS15;
#Net chk_tx_data      LOC = L20  | IOSTANDARD = LVCMOS15;
#Net swap_address     LOC = C18  | IOSTANDARD = LVCMOS15;

Net PHY_RESETN       LOC = AH13 | IOSTANDARD = LVCMOS25 | TIG;

# lock to unused header
#Net TX_STATISTICS_S  LOC = AP22 | IOSTANDARD = LVCMOS25;
#Net RX_STATISTICS_S  LOC = AG21 | IOSTANDARD = LVCMOS25;

Net GMII_RXD<7>      LOC = AC13 | IOSTANDARD = LVCMOS25;
Net GMII_RXD<6>      LOC = AC12 | IOSTANDARD = LVCMOS25;
Net GMII_RXD<5>      LOC = AD11 | IOSTANDARD = LVCMOS25;
Net GMII_RXD<4>      LOC = AM12 | IOSTANDARD = LVCMOS25;
Net GMII_RXD<3>      LOC = AN12 | IOSTANDARD = LVCMOS25;
Net GMII_RXD<2>      LOC = AE14 | IOSTANDARD = LVCMOS25;
Net GMII_RXD<1>      LOC = AF14 | IOSTANDARD = LVCMOS25;
Net GMII_RXD<0>      LOC = AN13 | IOSTANDARD = LVCMOS25;

Net GMII_TXD<7>      LOC = AF11 | IOSTANDARD = LVCMOS25;
Net GMII_TXD<6>      LOC = AE11 | IOSTANDARD = LVCMOS25;
Net GMII_TXD<5>      LOC = AM10 | IOSTANDARD = LVCMOS25;
Net GMII_TXD<4>      LOC = AL10 | IOSTANDARD = LVCMOS25;
Net GMII_TXD<3>      LOC = AG11 | IOSTANDARD = LVCMOS25;
Net GMII_TXD<2>      LOC = AG10 | IOSTANDARD = LVCMOS25;
Net GMII_TXD<1>      LOC = AL11 | IOSTANDARD = LVCMOS25;
Net GMII_TXD<0>      LOC = AM11 | IOSTANDARD = LVCMOS25;

Net GMII_COL         LOC = AK13 | IOSTANDARD = LVCMOS25;
Net GMII_CRS         LOC = AL13 | IOSTANDARD = LVCMOS25;
Net MII_TX_CLK       LOC = AD12 | IOSTANDARD = LVCMOS25;

Net GMII_TX_EN       LOC = AJ10 | IOSTANDARD = LVCMOS25;
Net GMII_TX_ER       LOC = AH10 | IOSTANDARD = LVCMOS25;
Net GMII_TX_CLK      LOC = AH12 | IOSTANDARD = LVCMOS25;

Net GMII_RX_DV       LOC = AM13 | IOSTANDARD = LVCMOS25;
Net GMII_RX_ER       LOC = AG12 | IOSTANDARD = LVCMOS25;
# P20 - GCLK7
Net GMII_RX_CLK      LOC = AP11 | IOSTANDARD = LVCMOS25;


#
####
#######
##########
#############
#################
#EXAMPLE DESIGN CONSTRAINTS

############################################################
# Clock Period Constraints                                 #
############################################################
###############################################################################
# CLOCK CONSTRAINTS
# The following constraints are required. If you choose to not use the example
# design level of wrapper hierarchy, the net names should be translated to
# match your design.
###############################################################################
NET "clk_in_p" TNM_NET = "clk_in_p";
TIMESPEC "TS_ethernet_core_clk_in_p" = PERIOD "clk_in_p" 5.000 ns HIGH 50% INPUT_JITTER 50.0ps;

#NET "MGTREFCLK_P" TNM_NET = "MGTREFCLK_P";
#TIMESPEC "TS_MGTREFCLK_P" = PERIOD "MGTREFCLK_P" 8 ns HIGH 50 %;


## Ethernet GTX_CLK high quality 125 MHz reference clock
NET "gtx_clk_bufg" TNM_NET = "gtx_clk_bufg";
TIMEGRP "ethernet_core_clk_ref_gtx" = "gtx_clk_bufg";
TIMESPEC "TS_ethernet_core_clk_ref_gtx" = PERIOD "ethernet_core_clk_ref_gtx" 8 ns HIGH 50 %;

## 66 MHz clock for MMCM and SREGS
NET "CLK66" TNM_NET = "CLK66";
TIMESPEC "TS_CLK66" = PERIOD "CLK66" 15.1515 ns HIGH 50 %;

## Multiplexed 1 Gbps, 10/100 Mbps output inherits constraint from GTX_CLK
NET "*tx_mac_aclk*" TNM_NET  = "clk_tx_mac";
TIMEGRP "ethernet_core_clk_ref_mux" = "clk_tx_mac";
TIMESPEC "TS_ethernet_core_clk_ref_mux" = PERIOD "ethernet_core_clk_ref_mux" TS_ethernet_core_clk_ref_gtx HIGH 50%;

## Ethernet GMII PHY-side receive clock
NET "gmii_rx_clk" TNM_NET = "phy_clk_rx";
TIMEGRP "ethernet_core_clk_phy_rx" = "phy_clk_rx";
TIMESPEC "TS_ethernet_core_clk_phy_rx" = PERIOD "ethernet_core_clk_phy_rx" 7.5 ns HIGH 50 %;

## define TIGs between unrelated clock domains
TIMESPEC "TS_clock_path_gtx2ref" = FROM "clock_generator_clkout0" TO "clock_generator_clkout2" TIG;
PIN "*bufgmux_speed_clk.I1" TIG;
PIN "*bufgmux_speed_clk.CE0" TIG;


#
####
#######
##########
#############
#################
#FIFO BLOCK CONSTRAINTS


###############################################################################
# AXI FIFO CONSTRAINTS
# The following constraints are necessary for proper operation of the AXI
# FIFO. If you choose to not use the FIFO Block level of wrapper hierarchy,
# these constraints should be removed.
###############################################################################

# AXI FIFO transmit-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?tx_fifo_i?rd_tran_frame_tog"    TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_retran_frame_tog"  TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_col_window_pipe_1" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*"       TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_txfer_tog"         TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?wr_frame_in_fifo"     TNM = "tx_fifo_wr_to_rd";

TIMESPEC "TS_tx_fifo_rd_to_wr" = FROM "tx_fifo_rd_to_wr" TO "ethernet_core_clk_ref_mux" 8 ns DATAPATHONLY;
TIMESPEC "TS_tx_fifo_wr_to_rd" = FROM "tx_fifo_wr_to_rd" TO "ethernet_core_clk_ref_mux" 8 ns DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*"          TNM = "tx_metastable";
INST "*user_side_FIFO?tx_fifo_i?wr_col_window_pipe_0" TNM = "tx_metastable";
TIMESPEC "TS_tx_meta_protect" = FROM "tx_metastable" 5 ns DATAPATHONLY;

# Transmit-side AXI FIFO address bus timing
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*" TNM = "tx_addr_rd";
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*"    TNM = "tx_addr_wr";
TIMESPEC "TS_tx_fifo_addr" = FROM "tx_addr_rd" TO "tx_addr_wr" 10 ns;

# AXI FIFO receive-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?rx_fifo_i?wr_store_frame_tog" TNM = "rx_fifo_wr_to_rd";
INST "*user_side_FIFO?rx_fifo_i?rd_addr*"           TNM = "rx_fifo_rd_to_wr";

TIMESPEC "TS_rx_fifo_wr_to_rd" = FROM "rx_fifo_wr_to_rd" TO "ethernet_core_clk_ref_gtx" 8 ns DATAPATHONLY;
TIMESPEC "TS_rx_fifo_rd_to_wr" = FROM "rx_fifo_rd_to_wr" TO "ethernet_core_clk_phy_rx"  8 ns DATAPATHONLY;


#
####
#######
##########
#############
#################
#BLOCK CONSTRAINTS

# Locate the Tri-Mode Ethernet MAC instance
INST "*v6_emac" LOC = "TEMAC_X0Y0";

###############################################################################
# PHYSICAL INTERFACE CONSTRAINTS
# The following constraints are necessary for proper operation, and are tuned
# for this example design. They should be modified to suit your design.
###############################################################################

# GMII physical interface constraints
# -----------------------------------------------------------------------------

# Set the IDELAY values on the PHY inputs, tuned for this example design.
# These values should be modified to suit your design.
INST "*v6emac_block*gmii_interface*delay_gmii_rx_dv" IDELAY_VALUE = 23;
INST "*v6emac_block*gmii_interface*delay_gmii_rx_er" IDELAY_VALUE = 23;
INST "*v6emac_block*gmii_interface*delay_gmii_rxd"   IDELAY_VALUE = 23;

# Group all IDELAY-related blocks to use a single IDELAYCTRL
INST "*dlyctrl"                                      IODELAY_GROUP = gmii_idelay;
INST "*v6emac_block*gmii_interface*delay_gmii_rx_dv" IODELAY_GROUP = gmii_idelay;
INST "*v6emac_block*gmii_interface*delay_gmii_rx_er" IODELAY_GROUP = gmii_idelay;
INST "*v6emac_block*gmii_interface*delay_gmii_rxd"   IODELAY_GROUP = gmii_idelay;

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the GMII receive bus remains in alignment with the rising edge of
# GMII_RX_CLK, to within 2 ns setup time and 0 ns hold time.
INST "gmii_rxd<?>" TNM = "gmii_rx";
INST "gmii_rx_dv"  TNM = "gmii_rx";
INST "gmii_rx_er"  TNM = "gmii_rx";
TIMEGRP "gmii_rx" OFFSET = IN 2 ns VALID 2 ns BEFORE "gmii_rx_clk" RISING;

# Constrain the GMII physical interface flip-flops to IOBs
INST "*v6emac_block*gmii_interface*rxd_to_mac*"  IOB = true;
INST "*v6emac_block*gmii_interface*rx_dv_to_mac" IOB = true;
INST "*v6emac_block*gmii_interface*rx_er_to_mac" IOB = true;
INST "*v6emac_block*gmii_interface*gmii_txd_?"   IOB = true;
INST "*v6emac_block*gmii_interface*gmii_tx_en"   IOB = true;
INST "*v6emac_block*gmii_interface*gmii_tx_er"   IOB = true;

# Location constraints are chosen for this example design.
# These values should be modified to suit your design.
# * Note that regional clocking imposes certain requirements
#   on the location of the physical interface pins and the TEMAC instance.
#   Please refer to the Virtex-6 FPGA Embedded Tri-Mode Ethernet MAC
#   User Guide for additional details. *

# Locate the GMII physical interface pins
# Locate the 125 MHz reference clock buffer
INST "*BUFGMUX_SPEED_CLK" LOC = "BUFGCTRL_X0Y6";

